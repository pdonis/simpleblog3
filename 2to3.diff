--- simpleblog/__init__.py	(original)
+++ simpleblog/__init__.py	(refactored)
@@ -160,17 +160,15 @@
     def __init__(cls, name, bases, attrs):
         super(BlogConfigUserMeta, cls).__init__(name, bases, attrs)
         # Only do this for config vars declared in this class
-        for key, value in attrs.get('config_vars', {}).iteritems():
+        for key, value in attrs.get('config_vars', {}).items():
             # The make_config_property function is factored out
             # to ensure each closure it returns is "clean"
             setattr(cls, key, make_config_property(key, value))
 
 
-class BlogConfigUser(object):
+class BlogConfigUser(object, metaclass=BlogConfigUserMeta):
     """Base class for objects that use a config.
     """
-    
-    __metaclass__ = BlogConfigUserMeta
     
     def __init__(self, config):
         self.config = config
@@ -387,8 +385,8 @@
     
     config_vars = dict(
         utc_timestamps=False,
-        timestamp_template=u"{hour:02d}:{minute:02d}",
-        datestamp_template=u"{year}-{month:02d}-{day:02d}"
+        timestamp_template="{hour:02d}:{minute:02d}",
+        datestamp_template="{year}-{month:02d}-{day:02d}"
     )
     
     sourcetype = 'entry'
@@ -408,7 +406,7 @@
     
     @extendable_property()
     def heading(self):
-        return u"Single Entry"
+        return "Single Entry"
     
     @extendable_property()
     def title(self):
@@ -457,7 +455,7 @@
     def timestamp_attrs(self, dt):
         return dict(
             (key, (varfunc or attrgetter(key))(dt))
-            for key, varfunc in self.timestamp_attrfuncs.iteritems()
+            for key, varfunc in self.timestamp_attrfuncs.items()
         )
     
     @extendable_property()
@@ -569,16 +567,14 @@
     def __init__(cls, name, bases, attrs):
         super(BlogEntriesMeta, cls).__init__(name, bases, attrs)
         # Similar setup to BlogConfigUserMeta, but for config_or_default_vars
-        for key, value in attrs.get('config_or_default_vars', {}).iteritems():
+        for key, value in attrs.get('config_or_default_vars', {}).items():
             setattr(cls, 'default_{}'.format(key), value)
             setattr(cls, key, make_config_or_default_property(key))
 
 
-class BlogEntries(BlogSource):
+class BlogEntries(BlogSource, metaclass=BlogEntriesMeta):
     """Container for a set of blog entries.
     """
-    
-    __metaclass__ = BlogEntriesMeta
     
     config_vars = dict(
         entry_sort_key='timestamp',
@@ -669,8 +665,8 @@
     
     sourcetype = 'blog'
     urlshort = "/"
-    default_title = u"Home"
-    default_heading = u"Home Page"
+    default_title = "Home"
+    default_heading = "Home Page"
     
     def _get_entries(self):
         return self.blog.all_entries
@@ -699,7 +695,7 @@
     def update(self, mapping=None, **kwargs):
         for obj in (mapping, kwargs):
             if obj:
-                for k, v in obj.iteritems():
+                for k, v in obj.items():
                     setattr(self, k, v)
     
     def get(self, key, default=None):
@@ -712,9 +708,9 @@
     """
     
     config_vars = dict(
-        no_entries=('no_entries_content', u"<p>No entries found!</p>"),
-        source_link_template=u'<a href="{urlshort}">{title}</a>',
-        source_link_sep=u"&nbsp;&nbsp;"
+        no_entries=('no_entries_content', "<p>No entries found!</p>"),
+        source_link_template='<a href="{urlshort}">{title}</a>',
+        source_link_sep="&nbsp;&nbsp;"
     )
     
     def __init__(self, blog, source, format):
@@ -831,7 +827,7 @@
         for key in self.required_metadata:
             if key not in self.metadata:
                 raise BlogMetadataError("{} missing from blog metadata".format(key))
-        for key, value in self.default_metadata.iteritems():
+        for key, value in self.default_metadata.items():
             self.metadata.setdefault(key, value.format(**self.metadata))
     
     @extendable_property()
--- simpleblog/caching.py	(original)
+++ simpleblog/caching.py	(refactored)
@@ -24,7 +24,7 @@
     without having to stat or open and load any entry files.
     """
     
-    def __init__(self, blog, cachename, reverse=False, objtype=None, sep=u' ', encoding='utf-8'):
+    def __init__(self, blog, cachename, reverse=False, objtype=None, sep=' ', encoding='utf-8'):
         BlogObject.__init__(self, blog)
         self.cachename = cachename
         self.reverse = reverse
@@ -60,10 +60,10 @@
             return dict(expr)
     
     def save(self):
-        items = self.cache.iteritems()
+        items = iter(self.cache.items())
         if self.reverse:
             items = ((v, k) for k, v in items)
-        lines = sorted(u"{0}{1}{2}\n".format(unicode(a), self.sep, unicode(b)) for a, b in items)
+        lines = sorted("{0}{1}{2}\n".format(str(a), self.sep, str(b)) for a, b in items)
         with codecs.open(self.filename, 'w', self.encoding) as f:
             f.writelines(lines)
 
--- simpleblog/commands/publish.py	(original)
+++ simpleblog/commands/publish.py	(refactored)
@@ -47,9 +47,9 @@
             "{}@{}:{}".format(self.ssh_user, self.ssh_host, self.ssh_path)
         ])
         if self.opts.debug:
-            print cmdline
+            print(cmdline)
         returncode, output = process_call(cmdline, shell=True)
         if (returncode != 0) or not self.opts.quiet:
-            print output
+            print(output)
         if returncode != 0:
-            print "Publish failed with return code {}".format(returncode)
+            print("Publish failed with return code {}".format(returncode))
--- simpleblog/commands/render_static.py	(original)
+++ simpleblog/commands/render_static.py	(refactored)
@@ -40,7 +40,7 @@
             path = os.path.abspath(os.path.join(self.static_dir, page.filepath))
             if self.opts.force or data_changed(data, path):
                 if not self.opts.quiet:
-                    print "Rendering", path
+                    print("Rendering", path)
                 dir = os.path.split(path)[0]
                 if not os.path.isdir(dir):
                     os.makedirs(dir)
@@ -48,4 +48,4 @@
                     f.write(data)
             else:
                 if not self.opts.quiet:
-                    print path, "is unchanged"
+                    print(path, "is unchanged")
--- simpleblog/commands/serve_local.py	(original)
+++ simpleblog/commands/serve_local.py	(refactored)
@@ -9,8 +9,7 @@
 """
 
 import os
-import SimpleHTTPServer
-import BaseHTTPServer
+import http.server
 
 from plib.stdlib.ostools import tmp_chdir
 
@@ -44,18 +44,18 @@
     
     def run(self, blog):
         http_root = os.path.abspath(self.static_dir)
-        server_class = BaseHTTPServer.HTTPServer
-        handler_class = SimpleHTTPServer.SimpleHTTPRequestHandler
+        server_class = http.server.HTTPServer
+        handler_class = http.server.SimpleHTTPRequestHandler
         server_address = (self.opts.hostname, self.opts.port)
         if not self.opts.quiet:
-            print "Serving files under {} at {}".format(
+            print("Serving files under {} at {}".format(
                 http_root,
                 "http://{}:{:d}/".format(self.opts.hostname, self.opts.port)
-            )
+            ))
         httpd = server_class(server_address, handler_class)
         with tmp_chdir(http_root):
             try:
                 httpd.serve_forever()
             except KeyboardInterrupt:
                 if not self.opts.quiet:
-                    print "Shutting down...."
+                    print("Shutting down....")
--- simpleblog/extensions/__init__.py	(original)
+++ simpleblog/extensions/__init__.py	(refactored)
@@ -40,8 +40,8 @@
         'name'
     )
     
-    default_title = u"{name}"
-    default_heading = u"{typename}: {name}"
+    default_title = "{name}"
+    default_heading = "{typename}: {name}"
     
     def __init__(self, blog, name):
         BlogEntries.__init__(self, blog)
@@ -95,15 +95,13 @@
                 setattr(cls, '%s_mixin' % etype.lower(), ext_mixin)
 
 
-class BlogExtension(BlogConfigUser):
+class BlogExtension(BlogConfigUser, metaclass=BlogExtensionMeta):
     """Base class for extension mechanism.
     """
     
-    __metaclass__ = BlogExtensionMeta
-    
     config_vars = dict(
-        container_link_template=u'<a href="{urlshort}">{title}</a>',
-        container_link_sep=u'',
+        container_link_template='<a href="{urlshort}">{title}</a>',
+        container_link_sep='',
     )
     
     def __init__(self, config):
--- simpleblog/extensions/archives.py	(original)
+++ simpleblog/extensions/archives.py	(refactored)
@@ -25,9 +25,9 @@
         prefix=('archives_prefix', ""),
         archive_use_monthnames=False,
         archive_long_monthnames=False,
-        archive_year_template=u"{year}",
-        archive_month_template=u"{year}-{monthkey}",
-        archive_day_template=u"{year}-{monthkey}-{daykey}"
+        archive_year_template="{year}",
+        archive_month_template="{year}-{monthkey}",
+        archive_day_template="{year}-{monthkey}-{daykey}"
     )
     
     sourcetype = 'archive'
@@ -44,7 +44,7 @@
         'title',
     )
     
-    default_heading = u"Archive: {title}"
+    default_heading = "Archive: {title}"
     
     def __init__(self, blog, year, month=0, day=0):
         BlogEntries.__init__(self, blog)
--- simpleblog/extensions/categories.py	(original)
+++ simpleblog/extensions/categories.py	(refactored)
@@ -25,7 +25,7 @@
     )
     
     sourcetype = 'category'
-    typename = u"Category"
+    typename = "Category"
     sourcetype_attrname = 'all_categories'
     
     def _get_entries(self):
@@ -46,7 +46,7 @@
     """
     
     config_vars = dict(
-        category_link_template=u'<a href="/{category}/">{category}</a>',
+        category_link_template='<a href="/{category}/">{category}</a>',
         no_category_link="(None)"
     )
     
--- simpleblog/extensions/feed.py	(original)
+++ simpleblog/extensions/feed.py	(refactored)
@@ -25,11 +25,11 @@
 tz_local = LocalTimezone()
 
 
-archive_marker = u"<fh:archive />"
-
-archive_current_tmpl = u'<link rel="current" href="{}/index.{}" />'
-
-archive_rel_tmpl = u'<link rel="{}-archive" href="{}{}{}.{}" />'
+archive_marker = "<fh:archive />"
+
+archive_current_tmpl = '<link rel="current" href="{}/index.{}" />'
+
+archive_rel_tmpl = '<link rel="{}-archive" href="{}{}{}.{}" />'
 
 archive_rel_specs = ('prev', 'next')
 
@@ -50,7 +50,7 @@
         'title',
     )
     
-    default_heading = u"Feed Archive: {title}"
+    default_heading = "Feed Archive: {title}"
     
     is_current_feed = True
     
@@ -156,9 +156,9 @@
         return super(BlogArchiveFeedEntries, self)._get_urlpath()
 
 
-template_rss = u"{0}, {1.day:02d} {2} {1.year} {1.hour:02d}:{1.minute:02d} GMT"
-
-template_atom = u"{0.year}-{0.month:02d}-{0.day:02d}T{0.hour:02d}:{0.minute:02d}:00Z"
+template_rss = "{0}, {1.day:02d} {2} {1.year} {1.hour:02d}:{1.minute:02d} GMT"
+
+template_atom = "{0.year}-{0.month:02d}-{0.day:02d}T{0.hour:02d}:{0.minute:02d}:00Z"
 
 
 def rss_format(t):
@@ -227,7 +227,7 @@
     """
     return re.sub(
         re_link,
-        lambda m: u'<a href="{0}/{1}"'.format(root_url, m.group(1)),
+        lambda m: '<a href="{0}/{1}"'.format(root_url, m.group(1)),
         html
     )
 
@@ -238,10 +238,10 @@
     
     config_vars = dict(
         archive_feeds=None,
-        atom_id_template=u"{cachekey}",
-        atom_category_template=u"entries",
-        rss_id_template=u"{cachekey}",
-        rss_category_template=u"entries"
+        atom_id_template="{cachekey}",
+        atom_category_template="entries",
+        rss_id_template="{cachekey}",
+        rss_category_template="entries"
     )
     
     def entry_mod_body(self, entry, body, format, params):
@@ -312,12 +312,12 @@
     def blog_mod_default_metadata(self, blog, data):
         if 'rss' in blog.feed_formats:
             data.update(
-                rss_title=u"RSS",
+                rss_title="RSS",
                 rss_url="/index.rss"
             )
         if 'atom' in blog.feed_formats:
             data.update(
-                atom_title=u"Atom",
+                atom_title="Atom",
                 atom_url="/index.atom",
             )
         return data
--- simpleblog/extensions/folding.py	(original)
+++ simpleblog/extensions/folding.py	(refactored)
@@ -19,7 +19,7 @@
 class FoldEntryMixin(EntryMixin):
     
     config_vars = dict(
-        fold_symbol=u"<!-- FOLD -->",
+        fold_symbol="<!-- FOLD -->",
         fold_inline=False,
         short_formats=dict(
             vartype=set,
--- simpleblog/extensions/indexes.py	(original)
+++ simpleblog/extensions/indexes.py	(refactored)
@@ -25,14 +25,14 @@
     """
     
     config_vars = dict(
-        index_link_template=u"{link}",
-        index_link_suffix_template=u"",
-        link_index_title_template=u"{heading}",
-        link_index_heading_template=u"{label} Index",
-        link_index_heading_alpha=u"Alphabetical",
-        link_index_heading_chrono=u"Chronological",
-        link_index_heading_key=u"Key",
-        link_index_sep=u"<br>"
+        index_link_template="{link}",
+        index_link_suffix_template="",
+        link_index_title_template="{heading}",
+        link_index_heading_template="{label} Index",
+        link_index_heading_alpha="Alphabetical",
+        link_index_heading_chrono="Chronological",
+        link_index_heading_key="Key",
+        link_index_sep="<br>"
     )
     
     def __init__(self, blog, format, alpha):
@@ -78,7 +78,7 @@
         return self.indexlinks_template.format(
             index_links=("{}{}".format(self.link_index_sep, newline)).join([
                 self.index_link_template.format(
-                    link=u'<a href="{0}.{1}">{2}</a>{3}'.format(
+                    link='<a href="{0}.{1}">{2}</a>{3}'.format(
                         entry.urlpath, self.format, label(entry), suffix(entry)
                     )
                 ) for entry in sorted(self.blog.all_entries, key=key, reverse=reverse)
--- simpleblog/extensions/links.py	(original)
+++ simpleblog/extensions/links.py	(refactored)
@@ -20,11 +20,11 @@
 class LinksEntryMixin(EntryMixin):
     
     config_vars = dict(
-        entrylink_sep=u"&nbsp;",
-        link_next_template=u"next in {}",
-        link_next_title_template=u"Next in {}",
-        link_prev_template=u"previous in {}",
-        link_prev_title_template=u"Previous in {}",
+        entrylink_sep="&nbsp;",
+        link_next_template="next in {}",
+        link_next_title_template="Next in {}",
+        link_prev_template="previous in {}",
+        link_prev_title_template="Previous in {}",
         link_display_sourcetypes=dict(
             vartype=set,
             default=['entry'])
@@ -47,14 +47,14 @@
             title = tmpl_title.format(label.capitalize()) if tmpl_title else None
             href = entry.make_permalink(format)
             if title:
-                return u'<a href="{}" title="{}">{}</a>'.format(href, title, content)
-            return u'<a href="{}">{}</a>'.format(href, content)
+                return '<a href="{}" title="{}">{}</a>'.format(href, title, content)
+            return '<a href="{}">{}</a>'.format(href, content)
         return content
     
     @extendable_method()
     def prev_next_link(self, attr, format, prefix):
         if isinstance(attr, list):
-            sep = u'{0}{1}{0}'.format(newline, self.entrylink_sep)
+            sep = '{0}{1}{0}'.format(newline, self.entrylink_sep)
             return sep.join(
                 self.get_entrylink(value, format, prefix)
                 for value in attr
--- simpleblog/extensions/localize.py	(original)
+++ simpleblog/extensions/localize.py	(refactored)
@@ -17,7 +17,7 @@
     
     def blog_post_init(self, blog):
         try:
-            blog.metadata.setdefault('locale', u"{0}_{1}.{2}".format(
+            blog.metadata.setdefault('locale', "{0}_{1}.{2}".format(
                 blog.metadata['language'],
                 blog.metadata['country'],
                 blog.metadata['charset']
--- simpleblog/extensions/paginate.py	(original)
+++ simpleblog/extensions/paginate.py	(refactored)
@@ -28,10 +28,10 @@
     config_vars = dict(
         page_max_entries=10,
         page_home_include_pagenum=False,
-        page_title_template=u"{title} - Page {pagenum}",
-        page_heading_template=u"{heading} - Page {pagenum}",
-        page_newer_label=u"Newer Entries",
-        page_older_label=u"Older Entries",
+        page_title_template="{title} - Page {pagenum}",
+        page_heading_template="{heading} - Page {pagenum}",
+        page_newer_label="Newer Entries",
+        page_older_label="Older Entries",
     )
     
     def __init__(self, blog, source, pagenum):
@@ -81,7 +81,7 @@
             (num_pages(self.orig_source, self.page_max_entries) - 1, 1, self.page_older_label)
         )
         return tuple(
-            u'<a href="{}{}">{}</a>'.format(
+            '<a href="{}{}">{}</a>'.format(
                 self.make_urlpath(self.urlshort, self.pagenum + ofs),
                 ".{}".format(format) if (self.pagenum + ofs) > 0 else "",
                 label
@@ -101,7 +101,7 @@
         page_max_entries=10,
         page_force_short=True,
         page_links_include_sources=False,
-        page_link_sep=u"&nbsp;&nbsp;"
+        page_link_sep="&nbsp;&nbsp;"
     )
     
     def page_get_link_source(self, page):
@@ -158,7 +158,7 @@
             if self.paginate(source, format):
                 newsources.extend(
                     (PageEntries(blog, source, pagenum), format)
-                    for pagenum in xrange(num_pages(source, self.page_max_entries))
+                    for pagenum in range(num_pages(source, self.page_max_entries))
                 )
             else:
                 newsources.append((source, format))
--- simpleblog/extensions/quote.py	(original)
+++ simpleblog/extensions/quote.py	(refactored)
@@ -8,8 +8,7 @@
 See the LICENSE and README files for more information
 """
 
-from urllib import quote_plus
-from urlparse import urljoin
+from urllib.parse import quote_plus, urljoin
 
 from plib.stdlib.iters import suffixed_items
 
--- simpleblog/extensions/render_markdown.py	(original)
+++ simpleblog/extensions/render_markdown.py	(refactored)
@@ -36,23 +36,23 @@
         blankline_flag = False
         for line in lines:
             if blankline_flag:
-                if not line.endswith(u"</blockquote>"):
-                    out.append(u"")
+                if not line.endswith("</blockquote>"):
+                    out.append("")
                 blankline_flag = False
             if in_blockquote:
-                if line.endswith(u"</blockquote>"):
+                if line.endswith("</blockquote>"):
                     in_blockquote = False
                 else:
-                    line = u"  {}".format(line)
+                    line = "  {}".format(line)
             else:
-                if line.startswith(u"<blockquote>"):
+                if line.startswith("<blockquote>"):
                     in_blockquote = True
             out.append(line)
             if (
-                line.endswith(u"</p>") or
-                line.endswith(u"</h1>") or
-                line.endswith(u"</pre>") or
-                line.endswith(u"</blockquote>")
+                line.endswith("</p>") or
+                line.endswith("</h1>") or
+                line.endswith("</pre>") or
+                line.endswith("</blockquote>")
             ):
                 blankline_flag = True
         return newline.join(out)
--- simpleblog/extensions/tags.py	(original)
+++ simpleblog/extensions/tags.py	(refactored)
@@ -15,15 +15,15 @@
 from simpleblog.extensions import BlogExtension, EntryMixin, NamedEntries
 
 
-tags_file = BlogExtension.config.get('tags_file', u"tags")
+tags_file = BlogExtension.config.get('tags_file', "tags")
 
 
 def makelink(name, prefix=None):
     if prefix:
-        href = u"{0}/{1}".format(prefix, name)
+        href = "{0}/{1}".format(prefix, name)
     else:
         href = name
-    return u'<a href="/{0}/">{1}</a>'.format(href, name)
+    return '<a href="/{0}/">{1}</a>'.format(href, name)
 
 
 class Tagset(object):
@@ -62,7 +62,7 @@
     
     sourcetype = 'tag'
     multisource = 'tags'
-    typename = u"Tag"
+    typename = "Tag"
     sourcetype_attrname = 'all_tags'
     
     def _get_entries(self):
--- simpleblog/extensions/timestamps.py	(original)
+++ simpleblog/extensions/timestamps.py	(refactored)
@@ -15,7 +15,7 @@
 from simpleblog.extensions import BlogExtension, EntryMixin
 
 
-timestamps_file = BlogExtension.config.get('timestamps_file', u"timestamps")
+timestamps_file = BlogExtension.config.get('timestamps_file', "timestamps")
 
 timestamp_cache_format = "%Y-%m-%d %H:%M"
 
--- simpleblog/extensions/timezone.py	(original)
+++ simpleblog/extensions/timezone.py	(refactored)
@@ -76,7 +76,7 @@
             # we only do this if there is indeed a mismatch
             if self.warn_on_timezone_mismatch:
                 # FIXME: Allow control of debug output/logging
-                print "Mismatched time zone in entry!"
+                print("Mismatched time zone in entry!")
             entry._tzname = tzname
         dt_naive = datetime.strptime(s, fmt)
         return entry.timezone.localize(dt_naive, is_dst=bool(sdst))
--- simpleblog/extensions/title.py	(original)
+++ simpleblog/extensions/title.py	(refactored)
@@ -17,7 +17,7 @@
 from simpleblog.extensions import BlogExtension, EntryMixin
 
 
-titles_file = BlogExtension.config.get('titles_file', u"titles")
+titles_file = BlogExtension.config.get('titles_file', "titles")
 
 
 class TitleEntryMixin(EntryMixin):
